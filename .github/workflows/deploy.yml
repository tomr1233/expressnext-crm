name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: tommy664/expressnext-crm:latest
        build-args: |
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_AWS_REGION=${{ secrets.NEXT_PUBLIC_AWS_REGION }}
          NEXT_PUBLIC_COGNITO_USER_POOL_ID=${{ secrets.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
          NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID=${{ secrets.NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Check SSM Instance Status
      run: |
        echo "Checking if instance ${{ secrets.EC2_INSTANCE_ID }} is available in SSM..."
        aws ssm describe-instance-information \
          --filters "Key=InstanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --region ${{ secrets.AWS_REGION }} || echo "Instance not found in SSM"
        
        echo "Listing all SSM-managed instances in this account:"
        aws ssm describe-instance-information \
          --region ${{ secrets.AWS_REGION }} \
          --query 'InstanceInformationList[*].[InstanceId,PingStatus,PlatformType]' \
          --output table
    
    - name: Deploy to EC2 via SSM
      run: |
        # Send and execute script via SSM
        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "#!/bin/bash",
            "set -e",
            "echo \"Starting deployment...\"",
            "docker pull tommy664/expressnext-crm:latest",
            "docker stop expressnext-crm || true",
            "docker rm expressnext-crm || true",
            "docker run -d --name expressnext-crm -p 3001:3001 -e GOOGLE_ANALYTICS_PROPERTY_ID=${{ secrets.GOOGLE_ANALYTICS_PROPERTY_ID }} -e GOOGLE_ANALYTICS_PROJECT_ID=${{ secrets.GOOGLE_ANALYTICS_PROJECT_ID }} -e GOOGLE_ANALYTICS_CLIENT_EMAIL=${{ secrets.GOOGLE_ANALYTICS_CLIENT_EMAIL }} -e GOOGLE_ANALYTICS_PRIVATE_KEY=${{ secrets.GOOGLE_ANALYTICS_PRIVATE_KEY }} --env-file /home/${{ secrets.EC2_USER }}/.env --restart unless-stopped tommy664/expressnext-crm:latest",
            "docker image prune -f",
            "echo \"Deployment completed successfully!\""
          ]' \
          --timeout-seconds 300 \
          --region ${{ secrets.AWS_REGION }} \
          --output text \
          --query 'Command.CommandId' > command-id.txt
        
        # Wait for command to complete and get output
        COMMAND_ID=$(cat command-id.txt)
        echo "SSM Command ID: $COMMAND_ID"
        
        # Wait for completion (but continue even if it fails)
        aws ssm wait command-executed \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }} || true
        
        # Get detailed command information
        echo "=== Command Details ==="
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }}
        
        # Get command output
        echo "=== Standard Output ==="
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }} \
          --query 'StandardOutputContent' \
          --output text
        
        # Get error output
        echo "=== Standard Error ==="
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }} \
          --query 'StandardErrorContent' \
          --output text
        
        # Check if command succeeded
        STATUS=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --region ${{ secrets.AWS_REGION }} \
          --query 'Status' \
          --output text)
        
        echo "Command status: $STATUS"
        
        if [ "$STATUS" != "Success" ]; then
          echo "Deployment failed with status: $STATUS"
          exit 1
        fi
        
        echo "Deployment completed successfully!"