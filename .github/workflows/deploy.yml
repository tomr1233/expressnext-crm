name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/expressnext-crm:latest
        build-args: |
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Get GitHub Actions IP and Allow SSH Access
      id: ip
      run: |
        IP=$(curl -s https://checkip.amazonaws.com/)
        echo "runner_ip=$IP" >> $GITHUB_OUTPUT
        echo "Runner IP: $IP"
        
        # Temporarily allow SSH from this IP (requires AWS CLI and credentials)
        # aws ec2 authorize-security-group-ingress \
        #   --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
        #   --protocol tcp \
        #   --port 22 \
        #   --cidr $IP/32 \
        #   --region ${{ secrets.AWS_REGION }}
    
    - name: Test SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        debug: true
        script: |
          echo "SSH connection successful!"
          whoami
          pwd
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        command_timeout: 120s
        debug: true
        script: |
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/expressnext-crm:latest
          
          # Stop and remove existing container (if running)
          docker stop expressnext-crm || true
          docker rm expressnext-crm || true
          
          # Run new container
          docker run -d \
            --name expressnext-crm \
            -p 3001:3001 \
            --env-file /home/${{ secrets.EC2_USER }}/.env \
            --restart unless-stopped \
            ${{ secrets.DOCKER_USERNAME }}/expressnext-crm:latest
          
          # Clean up old images
          docker image prune -f